use eframe::egui;
use crate::gui::{window, Theme};

#[derive(Default)]
pub struct App {
    name: String,
    pub current_theme: Theme,
}

impl eframe::App for App {
    fn update(&mut self, ctx: &egui::Context, _frame: &mut eframe::Frame) {
        // –ú–µ–Ω—é —Å –≤—ã–±–æ—Ä–æ–º —Ç–µ–º—ã
        egui::TopBottomPanel::top("top_panel").show(ctx, |ui| {
            ui.horizontal_centered(|ui| {
                ui.heading("Adhan Rust");
                
                ui.separator();
                
                ui.label("–¢–µ–º–∞:");
                for theme in [Theme::Dark, Theme::Light] {
                    let theme_name = match theme {
                        Theme::Dark => "–¢–µ–º–Ω–∞—è",
                        Theme::Light => "–°–≤–µ—Ç–ª–∞—è",
                    };
                    
                    if ui.selectable_label(self.current_theme == theme, theme_name).clicked() {
                        self.current_theme = theme;
                        crate::gui::apply_theme(ctx, theme);
                    }
                }
            });
        });

        // –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        egui::CentralPanel::default()
            .frame(window::get_panel_frame())
            .show(ctx, |ui| {
                ui.heading("–ü—Ä–∏–≤–µ—Ç –∏–∑ Adhan Rust!");
                
                ui.horizontal(|ui| {
                    ui.label("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è: ");
                    ui.text_edit_singleline(&mut self.name);
                });
                
                if ui.button("–ü–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å").clicked() {
                    println!("–ü—Ä–∏–≤–µ—Ç, {}!", self.name);
                }
                
                ui.label(format!("–ü—Ä–∏–≤–µ—Ç, {}! üëã", self.name));
            });
    }
}
